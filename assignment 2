-- 12330279 Song Ziwenhan

data Sex = Male | Female deriving (Eq, Show)
instance Ord Sex where
    compare Male Male = EQ
    compare Male Female = LT
    compare Female Male = GT
    compare Female Female = EQ

data Status = Alive | Dead | Abdicated deriving (Eq, Show)

data Person = Person Sex Status String deriving (Eq, Show)
instance Ord Person where
    compare (Person sx1 _ _) (Person sx2 _ _) = compare sx1 sx2
data Dynasty =
    Descend Person [Dynasty] | Dull Person deriving (Eq, Show)
instance Ord Dynasty where
    compare (Descend p1 _) (Descend p2 _) = compare p1 p2
    compare (Descend p1 _) (Dull p2 ) = compare p1 p2
    compare (Dull p1 ) (Descend p2 _) = compare p1 p2
    compare (Dull p1) (Dull p2 ) = compare p1 p2

successors :: String -> Dynasty -> [String]
successors name dynasty = aliveafter name (linefrom dynasty)

-- define the catamorphism cataD on Dynasty
cataD :: (Person -> [t] -> t) -> (Person -> t) -> Dynasty -> t
cataD nservice mservice (Dull person) = mservice person
cataD nservice mservice (Descend person dys) = 
    nservice person (map (cataD nservice mservice) dys)

-- then reimplement linefrom to use cataD instead of explicit
-- recursion and the new version of reorder below
linefrom :: Dynasty -> [Person]
linefrom dy =
    cataD
    (\person@(Person _ status _) ps ->
        if status == Abdicated then []
        else [person] ++ (concat ps))
    (\person@(Person _ status _) -> 
        if status == Abdicated then []
        else [person])
    (reorder dy)

-- redefine reorder so that all sub-dynasties are sorted
-- with Males before Females, using cataD
reorder :: Dynasty -> Dynasty
reorder dy =
    cataD
    (\person dys -> Descend person (sortds dys))
    (\person -> Dull person)
    dy

sortds :: [Dynasty] -> [Dynasty]
-- reimplement sortds to use new insertd and flatten below
sortds dys = flatten (foldr insertd (Dnull) dys)

-- define a type of binary trees for Dynasty
data BTD = Dnode BTD Dynasty BTD | Dnull

-- define the catamorphism cataBTD on the above type
cataBTD :: (t -> Dynasty -> t -> t) -> t -> BTD -> t
cataBTD nservice mservice Dnull = mservice
cataBTD nservice mservice (Dnode t1 dy t2) = 
    nservice (cataBTD nservice mservice t1) dy (cataBTD nservice mservice t2)
-- use cataBTD to define a function to "flatten" btd :: BTD
-- in an in-order traversal
flatten :: BTD -> [Dynasty]
flatten btd =
    cataBTD
    (\dsl dy dsr -> dsl ++ [dy] ++ dsr)
    []
    btd

-- redefine insertd so that "flatten d" yields every top-level
-- Dynasty in d headed by a Male before every top-level Dynasty
-- in d headed by a Female, in particular so that
-- "flatten (insertd d btd)" yields d before every top-level Dynasty
-- headed by a Person of the same Sex as d
insertd :: Dynasty -> BTD -> BTD
insertd dy Dnull = Dnode Dnull dy Dnull
insertd dy (Dnode tl d tr) =
    if dy <= d 
        then Dnode (insertd dy tl) d tr
    else Dnode tl d (insertd dy tr)

aliveafter :: String -> [Person] -> [String]
aliveafter name ps =
    let fromnam = dropWhile (\(Person _ _ pname)-> name /= pname) ps
    in if null fromnam then [] else alivein (tail fromnam)

alivein :: [Person] -> [String]
alivein ps =
    map
    (\(Person _ _ name) -> name)
    (filter (\(Person _ st _) -> st == Alive) ps)


exdyn =
    Descend (Person Male Dead "George5")
    [
        Descend (Person Male Abdicated "Edward8") [],
        Descend (Person Male Dead "George6")
        [
            Descend (Person Female Alive "Elizabeth2")
            [
                Descend (Person Male Alive "Charles")
                [
                    Descend (Person Male Alive "William")
                    [
                        Descend (Person Male Alive "George") []
                    ],

                    Descend (Person Male Alive "Harry") []

                ],

                Descend (Person Female Alive "Anne")

                [

                    Descend (Person Male Alive "Peter")

                    [

                        Dull (Person Female Alive "Savannah"),

                        Dull (Person Female Alive "Isla")

                    ],

                    Dull (Person Female Alive "Zarah")

                ],

                Descend (Person Male Alive "Andrew")

                [

                    Dull (Person Female Alive "Beatrice"),

                    Dull (Person Female Alive "Eugenie")

                ],

                Descend (Person Male Alive "Edward")

                [

                    Dull (Person Female Alive "Louise"),

                    Dull (Person Male Alive "James")

                ]

            ],

            Descend (Person Female Dead "Margaret")

            [

                Dull (Person Male Alive "David"),

                Dull (Person Female Alive "Sarah")

            ]

        ],

        Dull (Person Female Dead "Mary"),

        Dull (Person Male Dead "Henry"),

        Dull (Person Male Dead "George"),

        Dull (Person Male Dead "John")

    ]

